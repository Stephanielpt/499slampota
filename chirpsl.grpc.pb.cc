// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chirpsl.proto

#include "chirpsl.pb.h"
#include "chirpsl.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace chirp {

static const char* ServiceLayer_method_names[] = {
  "/chirp.ServiceLayer/registeruser",
  "/chirp.ServiceLayer/chirp",
  "/chirp.ServiceLayer/follow",
  "/chirp.ServiceLayer/read",
  "/chirp.ServiceLayer/monitor",
};

std::unique_ptr< ServiceLayer::Stub> ServiceLayer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServiceLayer::Stub> stub(new ServiceLayer::Stub(channel));
  return stub;
}

ServiceLayer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_registeruser_(ServiceLayer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_chirp_(ServiceLayer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_follow_(ServiceLayer_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_read_(ServiceLayer_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_monitor_(ServiceLayer_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ServiceLayer::Stub::registeruser(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::chirp::RegisterReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_registeruser_, context, request, response);
}

void ServiceLayer::Stub::experimental_async::registeruser(::grpc::ClientContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_registeruser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::chirp::RegisterReply>* ServiceLayer::Stub::AsyncregisteruserRaw(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chirp::RegisterReply>::Create(channel_.get(), cq, rpcmethod_registeruser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::chirp::RegisterReply>* ServiceLayer::Stub::PrepareAsyncregisteruserRaw(::grpc::ClientContext* context, const ::chirp::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chirp::RegisterReply>::Create(channel_.get(), cq, rpcmethod_registeruser_, context, request, false);
}

::grpc::Status ServiceLayer::Stub::chirp(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::chirp::ChirpReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_chirp_, context, request, response);
}

void ServiceLayer::Stub::experimental_async::chirp(::grpc::ClientContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_chirp_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::chirp::ChirpReply>* ServiceLayer::Stub::AsyncchirpRaw(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chirp::ChirpReply>::Create(channel_.get(), cq, rpcmethod_chirp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::chirp::ChirpReply>* ServiceLayer::Stub::PrepareAsyncchirpRaw(::grpc::ClientContext* context, const ::chirp::ChirpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chirp::ChirpReply>::Create(channel_.get(), cq, rpcmethod_chirp_, context, request, false);
}

::grpc::Status ServiceLayer::Stub::follow(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::chirp::FollowReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_follow_, context, request, response);
}

void ServiceLayer::Stub::experimental_async::follow(::grpc::ClientContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_follow_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::chirp::FollowReply>* ServiceLayer::Stub::AsyncfollowRaw(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chirp::FollowReply>::Create(channel_.get(), cq, rpcmethod_follow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::chirp::FollowReply>* ServiceLayer::Stub::PrepareAsyncfollowRaw(::grpc::ClientContext* context, const ::chirp::FollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chirp::FollowReply>::Create(channel_.get(), cq, rpcmethod_follow_, context, request, false);
}

::grpc::Status ServiceLayer::Stub::read(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::chirp::ReadReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_read_, context, request, response);
}

void ServiceLayer::Stub::experimental_async::read(::grpc::ClientContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_read_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::chirp::ReadReply>* ServiceLayer::Stub::AsyncreadRaw(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chirp::ReadReply>::Create(channel_.get(), cq, rpcmethod_read_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::chirp::ReadReply>* ServiceLayer::Stub::PrepareAsyncreadRaw(::grpc::ClientContext* context, const ::chirp::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chirp::ReadReply>::Create(channel_.get(), cq, rpcmethod_read_, context, request, false);
}

::grpc::ClientReader< ::chirp::MonitorReply>* ServiceLayer::Stub::monitorRaw(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::chirp::MonitorReply>::Create(channel_.get(), rpcmethod_monitor_, context, request);
}

::grpc::ClientAsyncReader< ::chirp::MonitorReply>* ServiceLayer::Stub::AsyncmonitorRaw(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chirp::MonitorReply>::Create(channel_.get(), cq, rpcmethod_monitor_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::chirp::MonitorReply>* ServiceLayer::Stub::PrepareAsyncmonitorRaw(::grpc::ClientContext* context, const ::chirp::MonitorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::chirp::MonitorReply>::Create(channel_.get(), cq, rpcmethod_monitor_, context, request, false, nullptr);
}

ServiceLayer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceLayer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServiceLayer::Service, ::chirp::RegisterRequest, ::chirp::RegisterReply>(
          std::mem_fn(&ServiceLayer::Service::registeruser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceLayer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServiceLayer::Service, ::chirp::ChirpRequest, ::chirp::ChirpReply>(
          std::mem_fn(&ServiceLayer::Service::chirp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceLayer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServiceLayer::Service, ::chirp::FollowRequest, ::chirp::FollowReply>(
          std::mem_fn(&ServiceLayer::Service::follow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceLayer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServiceLayer::Service, ::chirp::ReadRequest, ::chirp::ReadReply>(
          std::mem_fn(&ServiceLayer::Service::read), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServiceLayer_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ServiceLayer::Service, ::chirp::MonitorRequest, ::chirp::MonitorReply>(
          std::mem_fn(&ServiceLayer::Service::monitor), this)));
}

ServiceLayer::Service::~Service() {
}

::grpc::Status ServiceLayer::Service::registeruser(::grpc::ServerContext* context, const ::chirp::RegisterRequest* request, ::chirp::RegisterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServiceLayer::Service::chirp(::grpc::ServerContext* context, const ::chirp::ChirpRequest* request, ::chirp::ChirpReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServiceLayer::Service::follow(::grpc::ServerContext* context, const ::chirp::FollowRequest* request, ::chirp::FollowReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServiceLayer::Service::read(::grpc::ServerContext* context, const ::chirp::ReadRequest* request, ::chirp::ReadReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServiceLayer::Service::monitor(::grpc::ServerContext* context, const ::chirp::MonitorRequest* request, ::grpc::ServerWriter< ::chirp::MonitorReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chirp

